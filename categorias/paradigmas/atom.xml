<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Paradigmas | Rogério Lino]]></title>
  <link href="http://rogeriolino.com/categorias/paradigmas/atom.xml" rel="self"/>
  <link href="http://rogeriolino.com/"/>
  <updated>2014-12-02T22:14:00-02:00</updated>
  <id>http://rogeriolino.com/</id>
  <author>
    <name><![CDATA[Rogério Lino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Paradigma Orientado a Objetos]]></title>
    <link href="http://rogeriolino.com/2006/10/05/paradigma-orientado-a-objetos/"/>
    <updated>2006-10-05T15:48:48-03:00</updated>
    <id>http://rogeriolino.com/2006/10/05/paradigma-orientado-a-objetos</id>
    <content type="html"><![CDATA[<p>A Programação Orientada a Objetos (POO) tem grande vantagem diantes as demais, como por exemplo o reuso de código, organização lógica dos programas e estruturação do código produzido.</p>

<p>Abaixo alguns conceitos de POO.</p>

<p><strong>Classe</strong>
É na classe que definimos as propriedades e os métodos dos objetos.</p>

<p><strong>Objeto:</strong>
É a instância de uma classe, é o elemento criado a partir da classe, segundo o molde definido nela.</p>

<p><strong>Herança:</strong>
É a característica da Orientação a Objetos que permite derivar uma classe de outra já existente. Herdando seus métodos e tudo que contém nela.</p>

<p><strong>Polimorfismo:</strong>
É a alteração da funcionalidade de um método em diferentes níveis de classe, sem alterar o formato do mesmo. Permite a Classe derivada alterar a funcionalidade de algo feito pela mãe, aproveitando ou não o que a mãe fazia. Ou seja, é o fato de objetos diferentes responderem a uma mesma chamada de método de maneiras diferentes.</p>

<p>Exemplo (Java):</p>

<pre><code>class FormaGeometrica {

    public void introduz() {
        System.out.println("Sou uma forma geométrica");&lt;/p&gt;
    }

}

class Retangulo extends FormaGeometrica {

    public void introduz() {
        System.out.println("Sou um retângulo");
    }

}

class Circulo extends FormaGeometrica {

    public void introduz() {
        System.out.println("Sou um círculo");
    }

}

public class Uso {

    public static void main (String[] args) {
        FormaGeometrica g1, g2, g3;
        g1 =  new FormaGeometrica();
        g2 = new Retangulo();
        g3 = new Circulo();
        g1.introduz(); // Sou uma forma geométrica
        g2.introduz(); // Sou um retângulo
        g3.introduz(); // Sou um círculo
    }

}
</code></pre>

<p><strong>mais sobre:</strong></p>

<p><a href="http://pt.wikipedia.org/wiki/Orientado_a_objeto">http://pt.wikipedia.org/wiki/Orientado_a_objeto</a>
<a href="http://www.vivaolinux.com.br/artigos/verArtigo.php?codigo=2365">http://www.vivaolinux.com.br/artigos/verArtigo.php?codigo=2365</a></p>
]]></content>
  </entry>
  
</feed>
