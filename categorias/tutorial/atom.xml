<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Rogério Lino]]></title>
  <link href="http://rogeriolino.com/categorias/tutorial/atom.xml" rel="self"/>
  <link href="http://rogeriolino.com/"/>
  <updated>2014-10-07T17:26:37-03:00</updated>
  <id>http://rogeriolino.com/</id>
  <author>
    <name><![CDATA[Rogério Lino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Session Keep Alive]]></title>
    <link href="http://rogeriolino.com/2014/05/12/session-keep-alive/"/>
    <updated>2014-05-12T13:14:14-03:00</updated>
    <id>http://rogeriolino.com/2014/05/12/session-keep-alive</id>
    <content type="html"><![CDATA[<p>Uma maneira fácil de manter a sessão ativa no lado do servidor sem sobrecarregá-lo com longos tempos de timeout, é usar um script que redireciona o usuário para a tela de login após um determinado período de inatividade (teclado e mouse ociosos), e fazer requisições assíncronas ao servidor para manter a sessão ativa durante a atividade.</p>

<!-- more -->


<p>Resumindo, enquanto usuário está utilizando a aplicação (digitando ou movendo o cursor) uma requisição assíncrona é disparada a cada X minutos (ping), e quando o usuário ficar ocioso começa a contar o tempo para redirecioná-lo para a tela de login. É importante que esse tempo para redirecionar para o login seja menor do que o timeout do servidor.</p>

<p>Para implementar essa ideia, vou utilizar um plugin jQuery que monitora a atividade do usuário (teclado e mouse): <a href="https://github.com/rogeriolino/jquery-idletimer.">https://github.com/rogeriolino/jquery-idletimer.</a></p>

<p>Abaixo o trecho javascript para disparar o ping e fazer o logout após 10 minutos de ociosidade.</p>

<p>``` js
// session keep alive
;(function($) {</p>

<pre><code>"use strict";

var pingTime = 60; // ping a cada 60 segundos
var count = pingTime;
$.idleTimer({
    time: 10 * 60, // 10 minutos para timeout
    start: function() {
        count = pingTime;
    },
    change: function(it) {
        count--;
        console.log(count);
        if (count &lt;= 0) {
            count = pingTime;
            $.ajax({ url: '/ping.php' });
        }
    },
    end: function() {
        window.location.href = '/logout.php';
    }
});
</code></pre>

<p>})(jQuery);
```</p>

<p>Arquivo PHP para receber as requisições e abrir a sessão mantendo-a ativa:</p>

<p>``` php  <br/>
&lt;?php</p>

<p>session_start();
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple javascript support detection]]></title>
    <link href="http://rogeriolino.com/2014/01/10/simple-javascript-support-detection/"/>
    <updated>2014-01-10T21:57:26-02:00</updated>
    <id>http://rogeriolino.com/2014/01/10/simple-javascript-support-detection</id>
    <content type="html"><![CDATA[<p>Partindo do princípio que o seu navegador não suporta javascript e depois contrariando via o próprio javascript, é possível fazer uma simples verificação se o navegador do usuário está com javascript habilitado ou não.</p>

<p>``` html
&lt;!DOCTYPE html>
<html class="no-js" lang="pt-BR">
<head></p>

<pre><code>&lt;title&gt;JS detection&lt;/title&gt;
&lt;script&gt;document.documentElement.className = document.documentElement.className.replace("no-js","js");&lt;/script&gt;

&lt;style&gt;
    .js .alert-danger { display: none; }
    .no-js .alert-success { display: none; }
&lt;/style&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div class="alert alert-danger"&gt;O seu navegador não possui suporte à &lt;b&gt;Javascript&lt;/b&gt;&lt;/div&gt;

&lt;div class="alert alert-success"&gt;O suporte à &lt;b&gt;Javascript&lt;/b&gt; está ativado&lt;/div&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>Visualizar <a href="http://dev.rogeriolino.com/exemplos/javascript/js-detection/">demo online</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: Slim Framework action based]]></title>
    <link href="http://rogeriolino.com/2013/12/27/php-slim-framework-action-based/"/>
    <updated>2013-12-27T10:06:51-02:00</updated>
    <id>http://rogeriolino.com/2013/12/27/php-slim-framework-action-based</id>
    <content type="html"><![CDATA[<p>Há algum tempo utilizo o <a href="http://www.slimframework.com/">Slim Framework</a> como base de meus projetos. E o motivo é sua simplicidade, velocidade e facilidade.</p>

<p>E para criar CRUD, eu utilizo um trecho de código para trabalhar rotas semelhante aos frameworks action based. Seguindo a convenção <strong>/controlador/método</strong>.</p>

<p><strong>Exemplo:</strong></p>

<p>Para a URI <strong>/clients/add</strong> terei uma classe controladora <strong>ClientsController</strong> com um método público (a ação) <strong>add</strong>. E o script tentará renderizar a página <strong>add.php</strong> dentro do diretório <strong>clients</strong>. E para a URI <strong>/clients/view/1</strong> será necessário ter o método <strong>view</strong> que recebe um parâmetro (nesse caso &ldquo;1&rdquo;).</p>

<p>Abaixo segue o trecho semelhante ao que está disponível no meu repositório no Github (porém nesse repositório utilizo o Twig como template engine): <a href="https://github.com/rogeriolino/slimapp-skeleton">rogeriolino/slimapp-skeleton</a>.</p>

<p>``` php
$app->any(&lsquo;/:controller(/)(:action(/)(:params+))&rsquo;, function($controller, $action = &lsquo;index&rsquo;, $params = array()) use ($app) {</p>

<pre><code>// transforma o parâmetro :controller no nome da classe controladora (com namespace)
$class = "MeuNamespace\\" . ucfirst($controller) . "Controller";
try {
    if (!class_exists($class)) {
        throw new \Exception('Controlador não encontrado');
    }
    $ctrl = new $class($app);
    $methodName = preg_replace('/[^A-z0-9]/', '_', $action);
    $ref = new \ReflectionMethod($class, $methodName);
    if (!$ref-&gt;isPublic()) {
        throw new \Exception('O método do controlador não é público.');
    }
    $view = $methodName;
    $rs = $ref-&gt;invokeArgs($ctrl, $params);
    if ($rs) {
        $view = $rs;
    }
    $app-&gt;render("{$controller}/{$view}.php");
} catch (\Exception $e) {
    $app-&gt;notFound();
}
</code></pre>

<p>});
```</p>

<p>Para utilizar o <a href="https://github.com/rogeriolino/slimapp-skeleton">slimapp-skeleton</a> basta clonar o repositório e depois fazer a instalação das dependências via <a href="http://getcomposer.org/">Composer</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular.js: Inplace editing]]></title>
    <link href="http://rogeriolino.com/2013/12/12/angular-js-inplace-editing/"/>
    <updated>2013-12-12T11:57:12-02:00</updated>
    <id>http://rogeriolino.com/2013/12/12/angular-js-inplace-editing</id>
    <content type="html"><![CDATA[<p><strong>HTML</strong></p>

<p>``` html</p>

<div class="container" ng-app="todo">
    <div ng-controller="todoCtrl">
        <form ng-submit="add()">
            <input type="text" class="form-control" placeholder="New task..." ng-model="newTodo">
            <button class="btn btn-primary">Add</button>
        </form>
        <ul>
            <li ng-repeat="todo in todos">
                <span ng-click="editing = true" ng-hide="editing"></span>
                <span ng-show="editing">
                    <input type="text" class="form-control" ng-model="todo.text" ng-blur="editing = false" ng-required>
                    <a data-ng-click="editing = false" class="glyphicon glyphicon-ok"></a>
                </span>
            </li>
        </ul>
    </div>
</div>


<p>```</p>

<p><strong>Javascript</strong></p>

<p>``` js<br/>
var app = angular.module(&lsquo;todo&rsquo;, []);</p>

<p>app.controller(&lsquo;todoCtrl&rsquo;, function($scope) {</p>

<pre><code>$scope.todos = [
    {text: "First task"}
];

$scope.add = function() {
    if ($scope.newTodo &amp;&amp; $scope.newTodo != '') {
        $scope.todos.push({
            text: $scope.newTodo
        });
        $scope.newTodo = '';
    }
}
</code></pre>

<p>});
```</p>

<p><a href="http://jsfiddle.net/rogeriolino/DTF2f/">JSFiddle demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3: Selection background color]]></title>
    <link href="http://rogeriolino.com/2013/01/02/css3-selection-background-color/"/>
    <updated>2013-01-02T10:08:47-02:00</updated>
    <id>http://rogeriolino.com/2013/01/02/css3-selection-background-color</id>
    <content type="html"><![CDATA[<p>Com o seletor <strong>selection</strong> podemos definir a cor do texto e de fundo do texto quando o selecionamos.</p>

<blockquote>
The ::-moz-selection (::selection) pseudo-element applies to the portion of a document that has been highlighted (e.g. selected with the mouse) by the user.

Gecko/Firefox supports ::-moz-selection, use also ::selection other browsers. The following properties apply to ::-moz-selection:  color, background and background-color (background-image is ignored).

[http://dochub.io/#css/selection](http://dochub.io/#css/selection)
</blockquote>


<p><strong>CSS</strong></p>

<p>``` css
p::selection  { color: #000; }
p::-moz-selection { color: #000; }</p>

<p>p.yellow::selection  { background: yellow; }
p.yellow::-moz-selection { background: yellow; }</p>

<p>p.green::selection { background: #58FF4B; }
p.green::-moz-selection { background: #58FF4B; }</p>

<p>p.pink::selection { background: #E2189C; }
p.pink::-moz-selection { background: #E2189C; }
```</p>

<p><strong>HTML</strong></p>

<p>``` html</p>

<p class="yellow">Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>




<p class="green">Aliquam erat volutpat. Donec in elit at magna venenatis venenatis...</p>




<p class="pink">Donec interdum placerat urna at aliquet...</p>


<p>```</p>

<p><strong>Exemplo</strong>
<a href="http://dev.rogeriolino.com/exemplos/css/selection/index.html">http://dev.rogeriolino.com/exemplos/css/selection/index.html</a></p>
]]></content>
  </entry>
  
</feed>
