<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Rogério Lino]]></title>
  <link href="http://rogeriolino.com/categorias/php/atom.xml" rel="self"/>
  <link href="http://rogeriolino.com/"/>
  <updated>2015-01-07T22:47:42-02:00</updated>
  <id>http://rogeriolino.com/</id>
  <author>
    <name><![CDATA[Rogério Lino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP: JsonSerializable]]></title>
    <link href="http://rogeriolino.com/2014/06/09/php-jsonserializable/"/>
    <updated>2014-06-09T14:44:23-03:00</updated>
    <id>http://rogeriolino.com/2014/06/09/php-jsonserializable</id>
    <content type="html"><![CDATA[<p>Desde a <strong>versão 5.4</strong> do PHP ficou mais fácil transformar entidades em <strong>JSON</strong> através da função <em>json_encode()</em>. Basta implementar a interface <a href="http://www.php.net/manual/class.jsonserializable.php">JsonSerializable</a>, no qual o único método que precisa ser implementado pela subclasse é o <em>jsonSerialize</em>.</p>

<!-- more -->


<pre><code class="php">class User implements \JsonSerializable {

    private $username;
    private $firstName;
    private $lastName;

    ...

    public function jsonSerialize() {
        return array(
            'username' =&gt; $this-&gt;username,
            'firstName' =&gt; $this-&gt;firstName,
            'lastName' =&gt; $this-&gt;lastName,
            'fullName' =&gt; "{$this-&gt;firstName} {$this-&gt;lastName}"
        );
    }

}
</code></pre>

<p>Serializando:</p>

<pre><code class="php">$user = new User();
$user-&gt;setUsername("rogeriolino");
$user-&gt;setFirstName("Rogério");
$user-&gt;setLastName("Lino");
echo json_encode($user);
</code></pre>

<p>Resultado:</p>

<pre><code class="json    ">{
    "username": "rogeriolino",
    "firstName": "Rogério",
    "lastName": "Lino",
    "fullName": "Rogério Lino",
}
</code></pre>

<p>Essa implementação se torna muito útil para desenvolvimento de APIs <strong>RESTful</strong> e <strong>ajax responses</strong> (json response).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session Keep Alive]]></title>
    <link href="http://rogeriolino.com/2014/05/12/session-keep-alive/"/>
    <updated>2014-05-12T13:14:14-03:00</updated>
    <id>http://rogeriolino.com/2014/05/12/session-keep-alive</id>
    <content type="html"><![CDATA[<p>Uma maneira fácil de manter a sessão ativa no lado do servidor sem sobrecarregá-lo com longos tempos de timeout, é usar um script que redireciona o usuário para a tela de login após um determinado período de inatividade (teclado e mouse ociosos), e fazer requisições assíncronas ao servidor para manter a sessão ativa durante a atividade.</p>

<!-- more -->


<p>Resumindo, enquanto usuário está utilizando a aplicação (digitando ou movendo o cursor) uma requisição assíncrona é disparada a cada X minutos (ping), e quando o usuário ficar ocioso começa a contar o tempo para redirecioná-lo para a tela de login. É importante que esse tempo para redirecionar para o login seja menor do que o timeout do servidor.</p>

<p>Para implementar essa ideia, vou utilizar um plugin jQuery que monitora a atividade do usuário (teclado e mouse): <a href="https://github.com/rogeriolino/jquery-idletimer.">https://github.com/rogeriolino/jquery-idletimer.</a></p>

<p>Abaixo o trecho javascript para disparar o ping e fazer o logout após 10 minutos de ociosidade.</p>

<pre><code class="js">// session keep alive
;(function($) {
    "use strict";

    var pingTime = 60; // ping a cada 60 segundos
    var count = pingTime;
    $.idleTimer({
        time: 10 * 60, // 10 minutos para timeout
        start: function() {
            count = pingTime;
        },
        change: function(it) {
            count--;
            console.log(count);
            if (count &lt;= 0) {
                count = pingTime;
                $.ajax({ url: '/ping.php' });
            }
        },
        end: function() {
            window.location.href = '/logout.php';
        }
    });
})(jQuery);
</code></pre>

<p>Arquivo PHP para receber as requisições e abrir a sessão mantendo-a ativa:</p>

<pre><code class="php    ">&lt;?php

session_start();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: Slim Framework Action Based]]></title>
    <link href="http://rogeriolino.com/2013/12/27/php-slim-framework-action-based/"/>
    <updated>2013-12-27T10:06:51-02:00</updated>
    <id>http://rogeriolino.com/2013/12/27/php-slim-framework-action-based</id>
    <content type="html"><![CDATA[<p>Há algum tempo utilizo o <a href="http://www.slimframework.com/">Slim Framework</a> como base de meus projetos. E o motivo é sua simplicidade, velocidade e facilidade.</p>

<p>E para criar CRUD, eu utilizo um trecho de código para trabalhar rotas semelhante aos frameworks action based. Seguindo a convenção <strong>/controlador/método</strong>.</p>

<p><strong>Exemplo:</strong></p>

<p>Para a URI <strong>/clients/add</strong> terei uma classe controladora <strong>ClientsController</strong> com um método público (a ação) <strong>add</strong>. E o script tentará renderizar a página <strong>add.php</strong> dentro do diretório <strong>clients</strong>. E para a URI <strong>/clients/view/1</strong> será necessário ter o método <strong>view</strong> que recebe um parâmetro (nesse caso &ldquo;1&rdquo;).</p>

<p>Abaixo segue o trecho semelhante ao que está disponível no meu repositório no Github (porém nesse repositório utilizo o Twig como template engine): <a href="https://github.com/rogeriolino/slimapp-skeleton">rogeriolino/slimapp-skeleton</a>.</p>

<pre><code class="php">$app-&gt;any('/:controller(/)(:action(/)(:params+))', function($controller, $action = 'index', $params = array()) use ($app) {
    // transforma o parâmetro :controller no nome da classe controladora (com namespace)
    $class = "MeuNamespace\\" . ucfirst($controller) . "Controller";
    try {
        if (!class_exists($class)) {
            throw new \Exception('Controlador não encontrado');
        }
        $ctrl = new $class($app);
        $methodName = preg_replace('/[^A-z0-9]/', '_', $action);
        $ref = new \ReflectionMethod($class, $methodName);
        if (!$ref-&gt;isPublic()) {
            throw new \Exception('O método do controlador não é público.');
        }
        $view = $methodName;
        $rs = $ref-&gt;invokeArgs($ctrl, $params);
        if ($rs) {
            $view = $rs;
        }
        $app-&gt;render("{$controller}/{$view}.php");
    } catch (\Exception $e) {
        $app-&gt;notFound();
    }
});
</code></pre>

<p>Para utilizar o <a href="https://github.com/rogeriolino/slimapp-skeleton">slimapp-skeleton</a> basta clonar o repositório e depois fazer a instalação das dependências via <a href="http://getcomposer.org/">Composer</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: 5.5 New Features]]></title>
    <link href="http://rogeriolino.com/2013/07/17/php-5-5-new-features/"/>
    <updated>2013-07-17T18:23:11-03:00</updated>
    <id>http://rogeriolino.com/2013/07/17/php-5-5-new-features</id>
    <content type="html"><![CDATA[<p>A versão 5.5 do PHP foi lançada no mês passado, e trouxe algumas funcionalidades relevantes. Entre elas, seguem abaixo as mais interessantes (pelo menos para mim):</p>

<h3>Generators</h3>

<p>Com o <a href="http://br1.php.net/manual/en/language.generators.overview.php">Generators</a> você pode iterar com um dado dentro de uma função sem a necessidade de criar um array para ser retornado.</p>

<pre><code class="php">function numerosInteiros($minimo, $maximo) {
    for ($i = $minimo; $i &lt;= $maximo; $i++) {
        // a keyword yield "libera" a variável $i para a iteração (sem sair/retornar da/a função)
        yield $i;
    }
}

for (numerosInteiros(1, 10) as $numero) {
    echo "$numero ";
}
</code></pre>

<p>Ou um exemplo do próprio site php.net</p>

<pre><code class="php">function xrange($start, $limit, $step = 1) {
    if ($start &lt; $limit) {
        if ($step &lt;= 0) {
            throw new LogicException('Step must be +ve');
        }

        for ($i = $start; $i &lt;= $limit; $i += $step) {
            yield $i;
        }
    } else {
        if ($step &gt;= 0) {
            throw new LogicException('Step must be -ve');
        }

        for ($i = $start; $i &gt;= $limit; $i += $step) {
            yield $i;
        }
    }
}

/*
 * Note that both range() and xrange() result in the same
 * output below.
 */

echo 'Single digit odd numbers from range():  ';
foreach (range(1, 9, 2) as $number) {
    echo "$number ";
}
</code></pre>

<p>Repare que não há necessidade de criar um array, populá-lo, retorná-lo, e só depois iterá-lo para imprimir os valores.</p>

<h3>Finally</h3>

<p>Mesmo já possuindo a bastante tempo o bloco try/catch, só agora a partir da versão 5.5 foi introduzida a keyword <strong>finally</strong>. No qual você define um bloco para ser executado de qualquer maneira (mesmo que caia no catch).</p>

<pre><code class="php    ">function divide($a, $b) {
    if ($b === 0) {
        throw new Exception('Divisão por zero');
    }
    return $a / $b;
}

try {
    echo '10 / 2 = ' . divide(10, 2);
    echo '2 / 0 = ' . divide(2, 0);
} catch (Exception $e) {
    echo $e-&gt;getMessage();
} finally {
    echo 'Término das operações';
}
</code></pre>

<h3>::class</h3>

<p>Agora é possível resolver o nome da classe apenas através de <a href="http://br1.php.net/oop5.basic#language.oop5.basic.class.class">MinhaClass::class</a>.</p>

<pre><code class="php">&lt;?php
namespace NS {
    class ClassName {
    }  
    echo ClassName::class;
}
?&gt;
</code></pre>

<h3>empty()</h3>

<p>Agora é possível passar expressões para a função <a href="http://br2.php.net/migration55.new-features#migration55.new-features.empty">empty()</a> e não mais apenas variáveis.</p>

<pre><code class="php    ">&lt;?php
function always_false() {
    return false;
}

if (empty(always_false())) {
    echo "This will be printed.\n";
}

if (empty(true)) {
    echo "This will not be printed.\n";
}
?&gt;
</code></pre>

<h3>Veja mais</h3>

<p>Para saber mais sobre a nova versão acesse os links abaixo:</p>

<p><a href="http://www.php.net/releases/5_5_0.php">http://www.php.net/releases/5_5_0.php</a>
<a href="http://br2.php.net/manual/en/migration55.php">http://br2.php.net/manual/en/migration55.php</a></p>

<p>E o <strong>php.net</strong> também lançou sua versão nova (ainda em beta). <a href="http://php.net/?setbeta=1&amp;beta=1">Clique aqui para abrir a versão beta</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Novo SGA]]></title>
    <link href="http://rogeriolino.com/2013/02/05/novo-sga/"/>
    <updated>2013-02-05T09:33:57-02:00</updated>
    <id>http://rogeriolino.com/2013/02/05/novo-sga</id>
    <content type="html"><![CDATA[<p><a href="http://novosga.org"><img src="http://rogeriolino.com/uploads/2013/02/novosga.png" alt="novosga" /></a></p>

<blockquote>SGA é o acrônimo de Sistema de Gerenciamento de Atendimento, sistema desenvolvido pela Dataprev e liberado como código aberto através da versão SGA Livre.

Devido ao desenvolvimento do SGA Livre estar estagnado na mesma versão desde 2009, unindo a burocracia dos responsáveis pela comunidade no [Portal do Software Público](http://softwarepublico.gov.br/) surgiu a necessidade de criar uma nova versão para esse sistema que já roda em diversas localidades do Brasil.

A parte web foi totalmente reformulada, deixando mais leve e intuitiva, com uma interface amigável e instalação super fácil. Já no painel foi feitas melhorias para funcionar em monitores widescreen. Outras melhorias e funcionalidades estão previstas e irão ser aplicadas durante o desenvolvimento do projeto.</blockquote>


<p>Visite o <a href="http://novosga.org">site do projeto</a> e confira a <a href="http://novosga.org/demo">versão demo</a> disponível online.</p>

<p>Gostou e quer contribuir com o desenvolvimento? Acesse o <a href="http://github.com/rogeriolino/novosga">projeto no GitHub</a>.</p>
]]></content>
  </entry>
  
</feed>
